@Library('csm-shared-library') _

def isStable = env.TAG_NAME != null ? true : false
def sleImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle'
def sleVersion = '15.4'

pipeline {

    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()
        timeout(time: 20, unit: 'MINUTES')
        timestamps()
    }

    environment {
        NAME = getRepoName()
        VERSION = sh(returnStdout: true, script: "cat .version").trim()
        BUILD = sh(returnStdout: true, script: "git describe --tags | tr -s '-' '~' | sed 's/^v//'").trim()
    }

    stages {

        stage('Build & Publish') {

            matrix {

                axes {
                    axis {
                        name 'ARCH'
                        values 'x86_64'
                    }

                    axis {
                        name 'sleVersion'
                        values '15.4'
                    }

                }
                agent {
                    node {
                        label "metal-gcp-builder"
                        customWorkspace "${env.WORKSPACE}/${ARCH}/${SLEVERSION}"
                    }
                }

                stages {
                    stage('Prepare: Install go') {
                        agent {
                            docker {
                                label 'docker'
                                reuseNode true
                                image "${sleImage}:${sleVersion}"
                            }
                        }
                        steps {
                            sh "make install_go"
                        }
                    }


                    stage('Prepare: RPMs') {
                        agent {
                            docker {
                                label 'docker'
                                reuseNode true
                                image "${sleImage}:${sleVersion}"
                            }
                        }
                        steps {
                            runLibraryScript("addRpmMetaData.sh", "${env.NAME}.spec")
                            sh "git update-index --assume-unchanged ${env.NAME}.spec"
                            sh "make rpm_prepare"
                        }
                    }

                    stage('Build: RPMs') {
                        agent {
                            docker {
                                label 'docker'
                                reuseNode true
                                image "${sleImage}:${sleVersion}"
                            }
                        }
                        steps {
                            sh "make rpm"
                        }
                    }

                    stage('Publish: RPMs') {
                        steps {
                            script {
                                def sles_version_parts = "${sleVersion}".tokenize('.')
                                def sles_major = "${sles_version_parts[0]}"
                                def sles_minor = "${sles_version_parts[1]}"
                                publishCsmRpms(
                                        arch: "${ARCH}",
                                        component: env.NAME,
                                        isStable: isStable,
                                        os: "sle-${sles_major}sp${sles_minor}",
                                        pattern: "dist/rpmbuild/RPMS/${arch}/*.rpm",
                                )
                                publishCsmRpms(
                                        arch: "src",
                                        component: env.NAME,
                                        isStable: isStable,
                                        os: "sle-${sles_major}sp${sles_minor}",
                                        pattern: "dist/rpmbuild/SRPMS/*.rpm",
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
